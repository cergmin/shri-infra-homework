name: Release

on:
  workflow_dispatch:

jobs:
  lint-and-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '20.14.0'

      - name: Install dependencies
        run: npm install

      - name: Run lint
        run: npm run lint

      - name: Run test
        run: npm run test

  release:
    needs: lint-and-test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '20.14.0'

      - name: Install dependencies
        run: npm install

      - name: Build
        run: npm run build

      - name: Log in to the Yandex Container registry
        env:
          YC_TOKEN: ${{ secrets.YC_TOKEN }}
        run: |
          echo "$YC_TOKEN" | docker login --username oauth --password-stdin cr.yandex
        
      - name: Build Docker image
        env:
          CONTAINER_REGISTRY: ${{ secrets.REGISTRY_ID }}
        run: |
          docker build -t ${{ secrets.REGISTRY_ID }}/app:${{ github.run_number }} .
          docker tag ${{ secrets.REGISTRY_ID }}/app:${{ github.run_number }} ${{ secrets.REGISTRY_ID }}/app:${{ github.run_number }}_latest

      - name: Verify files copied to Docker context
        run: ls -la

      - name: Verify Docker image
        run: docker images

      - name: Push Docker image to Container Registry
        env:
          CONTAINER_REGISTRY: ${{ secrets.REGISTRY_ID }}
        run: |
          docker push ${{ secrets.REGISTRY_ID }}/app:${{ github.run_number }}
          docker push ${{ secrets.REGISTRY_ID }}/app:${{ github.run_number }}_latest

      - name: Create release branch
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"
          git checkout -b releases/${{ github.run_number }}
          git push https://${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git releases/${{ github.run_number }}

      - name: Create tag for current version
        run: |
          git tag -a v${{ github.run_number }} -m "Release version ${{ github.run_number }}"
          git push origin v${{ github.run_number }}
          
      - name: Create release label
        run: |
          gh label create "release-${{ github.run_number }}" || echo "Label already exists"
        env:
          GITHUB_TOKEN: ${{ github.token }}

      - name: Set release date
        run: echo "CURRENT_DATE=$(date +'%Y-%m-%d')" >> $GITHUB_ENV

      - name: Get Commit List
        id: commit-list
        run: |
          latest_tag=$(git describe --tags --abbrev=0 HEAD^ || echo "")
          if [ -z "$latest_tag" ]; then
            echo "No tags found, using initial commit"
            echo "::set-output name=commits::$(git log --pretty=format:'- %s' --no-merges)"
          else
            echo "::set-output name=commits::$(git log $latest_tag..HEAD --pretty=format:'- %s' --no-merges)"
          fi
          
      - name: Create issue for release
        run: |
          gh issue create \
            --title "$TITLE" \
            --body "$BODY" \
            --label "$LABELS"
        env:
          GITHUB_TOKEN: ${{ github.token }}
          TITLE: "Release ${{ github.run_number }}"
          BODY: |
            Дата: ${{ env.CURRENT_DATE }}
            Автор релиза: ${{ github.actor }}
            Номер версии: ${{ github.run_number }}
            Список коммитов от предыдущего релизного (или фиксрелизного) тега: 
            ${{ steps.get-commits.outputs.commits }}
            Docker образ: ${{ secrets.REGISTRY_ID }}/app:${{ github.run_number }}_latest
            
      - name: Update CHANGELOG.md
        env:
          GITHUB_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
        run: |
          > CHANGELOG.md
          echo "# Версия ${{ github.run_number }}" | cat - CHANGELOG.md > temp && mv temp CHANGELOG.md
          echo "" >> CHANGELOG.md
          echo "Список коммитов от предыдущего релизного (или фиксрелизного) тега:" >> CHANGELOG.md
          echo "${{ steps.get-commits.outputs.commits }}"     
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"
          git add CHANGELOG.md
          git commit -m "Update CHANGELOG for release ${{ github.run_number }}"
          git push https://${{ secrets.PERSONAL_ACCESS_TOKEN }}@github.com/${{ github.repository }}.git HEAD:releases/${{ github.run_number }}
          
      - name: Create and merge PR
        env:
          GITHUB_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
        run: |
          gh pr create --title "Release ${{ github.run_number }}" --body "Automatic release PR for version ${{ github.run_number }}" --head releases/${{ github.run_number }} --base main
          PR_NUMBER=$(gh pr list --head releases/${{ github.run_number }} --json number --jq '.[0].number')
          gh pr merge $PR_NUMBER --admin --merge
